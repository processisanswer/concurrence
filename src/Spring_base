Spring生态，Java Web开发事实上的标准

1 高效看源码的方法
    猜想+验证  70%+30%
    ----
    拿到需求就开干，干完之后就返工。
    先思考，想清楚再干。
    思考的时间，是自己留出来的
    ----
2 Spring代码优雅之道
    只需要300行代码
    提炼精华

3 过程
    1 加载配置文件；
    doLoadConfig();
    2 解析并扫描相关的类；
    doScanner();
    3 反射实例化相关的类（标有指定注解的），加入IoC容器中；
    doInstance();
    4 依赖注入
    doAutowired();
    5 初始化HandlerMapping
    initHandlerMapping();

    System.out.println("spring framework init successs");
    编码规范：减少代码嵌套。


private Map<String,Method> handlerMapping
    =new HashMap<>();
private Map<String,Object> ioc;


访问的时候，调用doDispatcher();
    解决方法调用时，实例找不着的问题，
    参数类型转化的问题

    private List<Handler> handlerMapping =new ArrayList<>();
    //内部类
    Handler{
        Object controller;
        Method method;
        Pattern pattern; //uri  是一个正则
        Map<String,String[]> params;//相残列表
    }

Spring 怎么控制bean不被回收的？
    单例：Spring的运行周期，都不被回收
    得益于IOC，因为采用注册式的单例，
    始终在Map中保存的实例的引用地址。
    GC 只要当IOC容器不被销毁，IOC中的
    单例Bean就永远存在。
    容器是static的，所以启动，就会初始化。

知其一却不知其二，知识就是碎片化的一种积累，
容易忘，学习方法最重要。
只有系统化学习，才能融会贯通。

Spring中的Bean是不是线程安全的？
    是和不是，都不对，以为这是一个坑。
       来源：Bean是通过扫描->反射->new出来的
        做了一个动作，然后将它保管起来了。
    这个Bean是不是线程安全的，跟Spring没有关系。
    安全不安全，跟Bean本身有关。

一个实例中，只有包含存在堆中、方法区中的变量，才会涉及线程安全问题。

    不要用身体上勤奋，
    来掩盖思维上懒惰
    从来都是获取，没有消化。

    Spring ，今晚过后，不再慌！
------------------------------------------
Bean的生命周期
    1--实例化、Bean的建立
    2--设置属性值，属性注入
    3--Bean的Id，如果实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法，传入Bean的ID
    4--容器本身，如果实现了BeanFactoryAware接口，工厂调用Bean的setBeanFactory()方法，传入工厂自身
    5--BeanPostProcessor的预初始化方法，如果BeanPostProcessors和Bean有关联，则Bean的postProcessBeforeInitialization()方法将被调用
    6--属性值设置完成后的方法，如果Bean类实现了InitializingBean接口，则执行它的afterPropertiesSet()方法
    7--定制的初始化方法，如果Bean定义文件中，自定义了init-method属性，则执行属性指定的方法
    8--BeanPostProcessor的后初始化方法，如果有有任何的BeanPostProcessors实例与Bean实例关联，则执行BeanPostProcessors实例的ProcessAfterInitializtion()方法
    9--Bean就可以用了
    ---销毁---
    1--容器关闭
    2--调用DisposableBean的destroy()方法
    3--调用定制的destroy-method属性配置的销毁方法
Spring 怎么控制bean不被回收的？
      SimpleJndiBeanFactory.java类中
        //使用new创建的map，final关键字修饰，是方法区常量池中的对象，可作为GC Roots 对象
        private final Map<String, Object> singletonObjects = new HashMap();
      StaticListableBeanFactory.java类中
        private final Map<String, Object> beans;
        public StaticListableBeanFactory() {
          //使用new创建的map，final关键字修饰，是方法区常量池中的对象，可作为GC Roots 对象
          this.beans = new LinkedHashMap();
        }
       这样，始终在Map中保存的实例的引用地址。
           GC Root可达，只要当IOC容器不被销毁，IOC中的
           单例Bean就永远存在。
           Map是final的，所以启动，就会初始化。

Spring中的Bean是不是线程安全的？
    严格意义上来讲，并不安全，和Bean的 Scope有关系。
    单例模式，不安全，除非单例对象的每个方法（method）都不会改变所共享的对象的属性或状态。
    多例模式，安全。
    Scope有中 singleton、prototype、request、session、globalsession

如果自己做一个aop，该注意到哪方面?
    AOP实际上是由目标类的代理类实现的。
    AOP代理其实是由AOP框架动态生成的一个对象，
    该对象可以作为目标对象使用。
    AOP代理包含了目标对象的全部方法，但AOP代理中
    的方法与目标对象的方法存在差异，AOP方法在特定
    切入点添加了增强处理，并回调了目标对象的方法。
    概念： 连接点 Joinpoint
           通知 Advice (around/before/after)
           切入点 Pointcut
           切面 Advisor
    使用XML文件配置、注解方式实现AOP
    动态代理技术：Java动态代理和CGLIB代理。
    JDK动态代理本身只提供接口的代理。
    --JDK动态代理--
    Proxy类 和 InvocationHandler接口，
    将目标业务类与横切代码编织到一起，通过代理实例实现。
    --CGlib--
    CGLib采用底层的字节码技术，为一个类创建子类，
    并在子类中采用方法拦截的技术拦截所有父类的
    调用方法，并顺势织入横切逻辑。

Spring用了哪些设计模式？
    单例模式、工厂模式、代理模式、
    模板模式 JdbcTemplate、
    策略模式 SimpleInstantiationStrategy、
    包装模式 类名中含有Wrapper，另一种是类名中含有Decorator。基本上都是动态地给一个对象添加一些额外的职责。
    适配模式 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
            MethodInterceptor
    观察者模式 Listener 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新

自己如何实现一个ioc aop 系统

Spring 怎么进行事务处理


BeanFactory和FactoryBean的区别









