1 分库分表意义
client->单体应用->1个DB
版本 V1.0
       --会员
client---营销
       --电商  如果还是一个DB，压力大，连接不够
       --ERP
       --等等
       ：问题点--模块耦合、没有面向接口编程、DB压力大
OOD  1.模块分解
     2.面向接口编程
版本 V1.X                                   会员账户模块    会员账户DB
         会员系统                  会员信息模块     会员信息DB
client   电商系统 组装各个小模块    ....            ....
         营销系统                  订单模块         订单DB
版本 V2.0
     每个模块单独封装，模块间尽量少的
     调用和耦合。
     粒度的划分
--为什么要引入分库分表？
    业务模块的拆分  分库的操作
    单表数据量恐怖 亿级
    500万量，查询维度很高时就需要考虑
    其他，单表1亿多，索引建好一般可满足要求
详解
对数据的库表进行拆分，用分片的方式对
数据进行管理。
--分库分表 拆分规则
    1 垂直拆分 按照功能模块集，进行拆分
    例如-单库，拆分为用户库、订单库、账户库
    带来的问题：连表查询问题、分布式事务问题
    2 水平拆分 大表化小表的过程
    例如，user库，水平拆分，user_id%10=0 数据库0号，上限1000万条
        拆分规则很多，例如按hash、按时间、按取模等等



MyCat
    开源的分布式数据库中间件
    基于阿里的cubar
    视为数据库代理即可
    --核心名词理解--
    逻辑库
        MyCat中定义的DB都是逻辑库
    逻辑表
        逻辑库中表为逻辑表，MyCat中的表都为逻辑表。
         分类：
            分片表：用分片规则修饰的表，例如sys_user
            全局表：不常变化、数据量不大、各个分库中都有，全局表之间
            同进退，共荣辱，更新一个则更新全部，有机制保证数据一致性。例如数据字典表
            ER表：实体-关系表。一对多的关系，例如张三信息在A库
                  而张三的收获地址信息也需要放在A库。
                  表示有关联关系、主外键关系的一组表，放在同一个分库
            非分片表：不属于上边三中分类的表。
                    数据来源单一，只是一个简单的映射。
    分片规则：例如 user_id%2

    节点： 一个分库即为节点
    节点主机： 一个数据库服务即为节点主机

----MyCat Java编写的
    bin程序目录
        /bin
        ./mycat start|restart|stop|status
     conf目录放置配置文件，使用MyCat就是玩配置文件
     server.xml MyCat服务器参数和用户授权。默认监听端口等
     schema.xml 配置逻辑库、逻辑表定义及分片引用的配置文件
     rule.xml
     log4j2.xml

原理机制
    拦截解析SQL或重写--> 数据源管理-->数据源分配
    -->请求/响应-->整合结果

    EXPLAIN select * from users;
    MyCat提供的显示执行计划命令。

--核实引入？
--

--可以改造系统了么？
    全局系列ID想到了么？
    每一个业务逻辑你验证了么？
    切分规则你选择好了么？
        离散型or连续型
            运行一段时间，再次定义规则，旧数据咋办？
                1 字段一样原规则跟现在规则一样，使用MyCat的工具DataMigrade
                2 否则，要做数据迁移。
    硬件规划你做好了？
        3-5年的硬件规划、冗余规划
    上限部署预演你做到位了么？
        限网系统的预演、试运营
    MyCat仅支持SQL92的语法，一些负责函数不支持。

    --事务问题--
    MyCat两阶段提交机制，来保证事务一致性
    --分页查询--




心急吃不了热豆腐--坑